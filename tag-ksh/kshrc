export XDG_CONFIG_HOME="${HOME}/.local/etc"
export XDG_CACHE_HOME="${HOME}/.local/cache"
export XDG_DATA_HOME="${HOME}/.local/share"

# general settings
export EDITOR="vim"
export LANG="$(locale -a | grep -i 'en_gb\.utf-*8' | head -n 1)"
export LESS="--ignore-case"
export PAGER="less"
export VISUAL="vim"

# ksh settings
HISTCONTROL="ignorespace"
HISTFILE="${XDG_DATA_HOME}/ksh/history"
HISTSIZE=10000
HISTEDIT="${EDITOR}"
FCEDIT="${EDITOR}"
set -o vi

# PATH
for TESTPATH in \
    "${HOME}/.local/bin" \
    "${HOME}/bin" \
    /Library/TeX/texbin \
    /usr/local/{,s}bin \
    /usr/{,s}bin \
    /{,s}bin
do
    [ -d "${TESTPATH}" ] && NEWPATH="${NEWPATH:+${NEWPATH}:}${TESTPATH}"
done
# Add any entries that were already in PATH but aren't in NEWPATH
PATH="$(print "${PATH}:${NEWPATH}:${NEWPATH}" | tr ':' '\n' | sort | uniq -u | tr '\n' ':')${NEWPATH}"
PATH="${PATH#:}"
unset TESTPATH NEWPATH
export PATH


# Prompt #######################################################################

function _prompt_jobs
{
    if [ $( jobs | wc -l ) -gt 0 ]; then
        print -n '\033[38;2;235;203;139m[!!]\033[0m '
    fi
}

function _prompt_pwd
{
	# OpenBSD ksh doesn't do ${PWD/pattern/sub}
	if [ "${PWD#${HOME}}" != "${PWD}" ]; then
        PWDSHORT="~${PWD#${HOME}}"
    else
        PWDSHORT="${PWD}"
    fi
    printf '\033[38;2;129;161;193m%s\033[0m' "${PWDSHORT}"
}

function _prompt_ssh
{
    if [ -n "${SSH_TTY}" ]; then
        printf '\033[38;2;136;192;208m%s\033[0m' "${USER}@$(hostname -s) "
    fi
}

function _prompt_venv
{
    printf '\033[38;2;76;86;106m%s\033[0m' "${VIRTUAL_ENV:+(venv) }"
}

function _prompt_arrow
{
    if [ $? -eq 0 ]; then
        print '\033[38;2;163;190;140m❯\033[0m'
    else
        print '\033[38;2;191;97;106m❯\033[0m'
    fi
}

PS1='
$(_prompt_jobs)$(_prompt_ssh)$(_prompt_pwd)
$(_prompt_venv)$(_prompt_arrow) '
PS2="$(printf '\033[38;2;76;86;106m... ❯\033[0m') "


# Aliases ######################################################################

alias ls="ls -lp"
if [[ $(uname -s) == 'Darwin' ]]; then
    alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'
fi


# Functions ####################################################################

function pwgen
{
    if [ ! -d "${XDG_CACHE_HOME}/pwgen" ]; then
        mkdir -p "${XDG_CACHE_HOME}"
        git clone https://github.com/andrewlkho/pwgen-xkcd.git "${XDG_CACHE_HOME}/pwgen"
        curl --silent \
            --output "${XDG_CACHE_HOME}/pwgen/eff_large_wordlist.txt" \
            https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt
    fi
    "${XDG_CACHE_HOME}/pwgen/pwgen.py" $* \
        "${XDG_CACHE_HOME}/pwgen/eff_large_wordlist.txt"
}

function mergepdf
{
    # This is a convenience function for merging scanned PDFs
    if [ $# -ne 2 ]; then
        echo "Usage: mergepdf output.pdf max-index" >&2
        return 1
    fi

    if [ ! -n "$(whence trash)" ]; then
        echo "Error: trash not installed (brew install trash)" >&2
        return 1
    fi

    if [ -a "${1}" ]; then
        echo "Error: ${1} already exists" >&2
        return 1
    fi

    for i in $(seq 1 ${2}); do
        if [ ! -a "${HOME}/Desktop/${i}.pdf" ]; then
            echo "Error: ${HOME}/Desktop/${i}.pdf does not exist" >&2
            return 1
        fi
    done

    echo "Combining PDFs to ${1}:"
    echo "$(seq -f "    - ${HOME}/Desktop/%g.pdf" 1 ${2})"
    "/System/Library/Automator/Combine PDF Pages.action/Contents/Resources/join.py" \
        -o "${1}" \
        $(seq -f "${HOME}/Desktop/%g.pdf" -s " " 1 ${2})
    echo "Moving PDFs to trash..."
    for i in $(seq 1 ${2}); do
        trash "${HOME}/Desktop/${i}.pdf"
    done
}
if [ "$(uname -s)" != "Darwin" ]; then
    unset -f mergepdf
fi


# Package-specific #############################################################

export VIMINIT="source ${XDG_CONFIG_HOME}/vim/vimrc"

export VIRTUAL_ENV_DISABLE_PROMPT=1

if [ -n "$(whence fzf)" ]; then
    export FZF_DEFAULT_COMMAND="find ${HOME}/Documents -name '.DS_Store' -prune -o -print"
    export FZF_DEFAULT_OPTS="--layout=reverse --info=inline --marker='∙' --height=50%
    --color=fg:#4C566A,bg:#2E3440,fg+:#D8DEE9,bg+:#2E3440,hl:#81A1C1,hl+:#81A1C1
    --color=gutter:#2E3440,info:#B48DAC,prompt:#A3BE8C,pointer:#B48DAC
    --color=marker:#A3BE8C --no-bold"
fi

if [ -n "$(whence brew)" ]; then
    export HOMEBREW_NO_ANALYTICS=1
    export HOMEBREW_NO_INSECURE_REDIRECT=1
fi

if [ -n "$(whence R)" ]; then
    export R_PROFILE_USER="${XDG_CONFIG_HOME}/R/Rprofile"
fi

if [ -n "$(whence rcup)" ]; then
    export RCRC="${XDG_CONFIG_HOME}/rcm/rcrc"
fi

if [ -L "${XDG_CONFIG_HOME}/gnupg/gpg.conf" ]; then
    export GNUPGHOME="${XDG_CONFIG_HOME}/gnupg"
fi

if [ -L "${XDG_CONFIG_HOME}/R/Rprofile" ]; then
    export R_PROFILE_USER="${XDG_CONFIG_HOME}/R/Rprofile"
fi
