set runtimepath=$XDG_CONFIG_HOME/vim
set runtimepath+=$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
set runtimepath+=$XDG_CONFIG_HOME/vim/after


" ---- Load plugins ------------------------------------------------------------

call plug#begin($XDG_CONFIG_HOME . "/vim/bundle")
Plug 'arcticicestudio/nord-vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'justinmk/vim-dirvish'
Plug 'psf/black', { 'branch': 'stable' }

Plug 'junegunn/fzf', { 'for': 'tex' }
Plug 'andrewlkho/vim-fzotf', { 'for': 'tex' }
call plug#end()


" ---- General options ---------------------------------------------------------

" colours
syntax enable
set termguicolors
let &t_8f = "[38;2;%lu;%lu;%lum"
let &t_8b = "[48;2;%lu;%lu;%lum"
let g:nord_bold_vertical_split_line = 1
colorscheme nord
set background=dark

" UI
set autoindent
set backspace=indent,eol,start
set cursorline
set fillchars=vert:\ 
set laststatus=2
set lazyredraw
set listchars=tab:>-,trail:-,eol:Â¬
set number
set relativenumber
set noshowmode
set scrolloff=5
set showtabline=0
set splitbelow
set splitright

" session files, and infinite undo
set undofile
set undodir=$XDG_CACHE_HOME/vim/undo//
set nobackup
set writebackup
set backupdir=$XDG_CACHE_HOME/vim/backup//
set directory=$XDG_CACHE_HOME/vim/swap//
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

" indentation is 4 spaces, don't use tabs (but if present display as 4 spaces)
set expandtab
set softtabstop=4
set shiftwidth=4
set tabstop=4

" searching
set incsearch
set hlsearch
set ignorecase
set smartcase

" file searching: recursive and use wildmenu
set path=.,,
if isdirectory($HOME . "/Dropbox/Notes")
    set path+=$HOME/Dropbox/Notes
endif
set wildmenu
set wildmode=longest:full,full

" completion
set completeopt-=preview
set completeopt+=longest,menuone
set shortmess+=c

" utf-8
set encoding=utf-8
set fileencoding=utf-8

" buffers
set hidden

" spelling
set spellfile=~/Documents/unison/spellfile.utf-8.add
set spelllang=en_gb

" blank *.tex files are still latex, not plaintex
let g:tex_flavor = "latex"


" ---- Statusline --------------------------------------------------------------

let g:mode_map={
            \ 'n' : 'NORMAL',
            \ 'i' : 'INSERT',
            \ 'R' : 'REPLACE',
            \ 'v' : 'VISUAL',
            \ 'V' : 'V-LINE',
            \ "\<C-v>" : 'V-BLOCK',
            \ 'c' : 'COMMAND',
            \ 's' : 'SELECT',
            \ 'S': 'S-LINE',
            \ "\<C-s>" : 'S-BLOCK',
            \ 'r' : 'PROMPT',
            \ '!' : 'SHELL',
            \ 't' : 'TERMINAL'
            \ }

let g:mode_colour={
            \ 'n' : 'normal',
            \ 'i' : 'insert',
            \ 'R' : 'replace',
            \ 'v' : 'visual',
            \ 'V' : 'visual',
            \ "\<C-v>" : 'visual',
            \ 'c' : 'other',
            \ 's' : 'other',
            \ 'S': 'other',
            \ "\<C-s>" : 'other',
            \ 'r' : 'other',
            \ '!' : 'other',
            \ 't' : 'other'
            \ }

highlight StatusLineNormal ctermfg=0 guifg=#3B4252 ctermbg=6 guibg=#88C0D0
highlight StatusLineInsert ctermfg=0 guifg=#3B4252 ctermbg=15 guibg=#ECEFF4
highlight StatusLineReplace ctermfg=0 guifg=#3B4252 ctermbg=3 guibg=#EBCB8B
highlight StatusLineVisual ctermfg=0 guifg=#3B4252 ctermbg=14 guibg=#8FBCBB
highlight StatusLineOther ctermfg=7 guifg=#E5E9F0 ctermbg=NONE guibg=#2E3440
highlight link StatusLinePaste StatuslineInsert
highlight link StatusLineLint StatuslineReplace
highlight StatusLineGroup0 ctermfg=7 guifg=#E5E9F0 ctermbg=8 guibg=#4C566A
highlight StatusLineGroup1 ctermfg=7 guifg=#E5E9F0 ctermbg=0 guibg=#3B4252
highlight StatusLineGroup1Red ctermfg=1 guifg=#bf616a ctermbg=0 guibg=#3B4252
highlight StatusLineGroup1Yellow ctermfg=3 guifg=#EBCB8B ctermbg=0 guibg=#3B4252
highlight link StatusLineNC StatusLineGroup0

function! LinterStatus()
    if &filetype == 'python'
        let l:errors = len(filter(getloclist(0), {k, v -> v.valid == 1 && (v.type == 'E' || v.type == 'F')}))
        let l:warnings = len(filter(getloclist(0), {k, v -> v.valid == 1 && v.type == 'W'}))
    elseif &filetype == 'bash'
        let l:errors = len(filter(getloclist(0), {k, v -> v.valid == 1 && v.type == 'e'}))
        let l:warnings = len(filter(getloclist(0), {k, v -> v.valid == 1 && v.type == 'w'}))
    else
        return ''
    endif

    let l:output = ''
    if l:errors > 0
        let l:output = l:output . 'âœ—' . l:errors . ' '
    endif
    if l:warnings > 0
        let l:output = l:output . 'â–²' . l:warnings . ' '
    endif
    if len(l:output) > 0
        let l:output = ' ' . l:output
    endif
    return l:output
endfunction

function! SetStatusLineActive()
    setlocal statusline=
    setlocal statusline+=%#StatusLineNormal#%{(g:mode_colour[mode()]=='normal')?'\ \ '.g:mode_map[mode()].'\ ':''}
    setlocal statusline+=%#StatusLineInsert#%{(g:mode_colour[mode()]=='insert')?'\ \ '.g:mode_map[mode()].'\ ':''}
    setlocal statusline+=%#StatusLineReplace#%{(g:mode_colour[mode()]=='replace')?'\ \ '.g:mode_map[mode()].'\ ':''}
    setlocal statusline+=%#StatusLineVisual#%{(g:mode_colour[mode()]=='visual')?'\ \ '.g:mode_map[mode()].'\ ':''}
    setlocal statusline+=%#StatusLineOther#%{(g:mode_colour[mode()]=='other')?'\ \ '.g:mode_map[mode()].'\ ':''}
    setlocal statusline+=%#StatusLinePaste#%{(&paste)?'\ \ PASTE\ ':''}
    setlocal statusline+=%#StatusLineGroup1#\ %t
    setlocal statusline+=%#StatusLineGroup1Yellow#%{&readonly?'\ !!':''}
    setlocal statusline+=%#StatusLineGroup1Red#%{&modified?'âˆ™':''}%#StatusLineGroup1#\ 
    setlocal statusline+=%#StatusLineGroup0#
    setlocal statusline+=%=
    setlocal statusline+=%{&fileformat}\ \|
    setlocal statusline+=\ %{&fileencoding?&fileencoding:&encoding}\ \|
    setlocal statusline+=\ %{&filetype!=''?&filetype:'-'}\ 
    setlocal statusline+=%#StatusLineLint#%{LinterStatus()}
    setlocal statusline+=%#StatusLineGroup1#%4v:%-4lâ‰¡%4L\ 
endfunction

function! SetStatusLineInactive()
    setlocal statusline=
    setlocal statusline+=%#StatusLineNC#
    setlocal statusline=\ %t
    setlocal statusline+=%{&readonly?'\ !!':''}
    setlocal statusline+=%#StatusLineGroup1Red#%{&modified?'âˆ™':''}%#StatusLineNC#\ 
endfunction

augroup status
    autocmd!
    autocmd VimEnter,BufEnter,WinEnter * call SetStatusLineActive()
    autocmd BufLeave,WinLeave * call SetStatusLineInactive()
augroup END


" ---- Custom mappings ---------------------------------------------------------

nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>

nnoremap [L :lfirst<CR>
nnoremap [l :lprevious<CR>
nnoremap ]l :lnext<CR>
nnoremap ]L :llast<CR>

nnoremap [Q :cfirst<CR>
nnoremap [q :cprevious<CR>
nnoremap ]q :cnext<CR>
nnoremap ]Q :clast<CR>

nnoremap <C-T> :ls<CR>:buffer<space>
nnoremap <leader>p :setlocal paste! paste?<CR>
nnoremap <leader>i :setlocal list! list?<CR>
nnoremap <leader>q :nohlsearch<CR>
nnoremap <leader>m :silent make! \| silent redraw!<CR>

inoremap <C-Z> <C-\><C-O>:stop<CR>

" requires vim-commentary
vmap <leader>\ gc

" requires vim-dirvish
function! RecentFiles()
    enew
    put =execute('oldfiles')
    setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile
    set filetype=dirvish
    g/^$/d
    call setline(1, map(getline(1,'$'), {k,v -> substitute(v, '^[0-9]*: ', '', '')}))
    call setline(1, map(getline(1,'$'), {k,v -> substitute(v, '^\~', expand('~'), '')}))
    nmap <buffer> gq :bdelete<CR>
    sort
    1
endfunction
nnoremap <leader>o :call RecentFiles()<CR>

" diff the current file with the last committed version in a new tab page
function! GitDiff()
    tabedit %
    vnew | setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile
    silent! read !git show HEAD:'./#'
    0d_
    diffthis
    wincmd p
    diffthis
endfunction
command! GitDiff call GitDiff()


" ---- Plugin-specific settings ------------------------------------------------

" vim-dirvish
let g:dirvish_mode = ':sort ,^\v(.*[\/])|\ze,'

" black
let g:black_virtualenv = $XDG_CACHE_HOME . "/vim/black"

" vim-fzotf
let g:fzotf_zotdir = '~/Documents/andrewonntserver/Work/Zotero'
let g:fzotf_options = '--multi --exact'
