set runtimepath=$XDG_CONFIG_HOME/vim
set runtimepath+=$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
set runtimepath+=$XDG_CONFIG_HOME/vim/after
call plug#begin($XDG_CONFIG_HOME . "/vim/bundle")
" general
Plug 'arcticicestudio/nord-vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'airblade/vim-gitgutter'
Plug 'dense-analysis/ale'
Plug 'tpope/vim-eunuch'
Plug 'lifepillar/vim-mucomplete'
Plug 'justinmk/vim-dirvish'

" python
Plug 'tmhedberg/SimpylFold'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'davidhalter/jedi-vim'

" latex
Plug 'sonph/onehalf', { 'rtp': 'vim/' }
call plug#end()

" UI
set autoindent
set backspace=indent,eol,start
set colorcolumn=80
set lazyredraw
set listchars=tab:>-,trail:-,eol:Â¬
set number
set relativenumber
set scrolloff=5
set splitbelow
set splitright

" session files, and infinite undo
set undofile
set undodir=$XDG_CACHE_HOME/vim/undo//
set nobackup
set writebackup
set backupdir=$XDG_CACHE_HOME/vim/backup//
set directory=$XDG_CACHE_HOME/vim/swap//
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

" indentation is 4 spaces, don't use tabs (but if present display as 4 spaces)
set expandtab
set softtabstop=4
set shiftwidth=4
set tabstop=4
" keep selection when indenting
vnoremap < <gv
vnoremap > >gv

" searching
set incsearch
set hlsearch
set ignorecase
set smartcase
nmap <leader>q :nohlsearch<CR>

" file searching: recursive and use wildmenu
set path+=**
set wildmenu

" completion
set completeopt-=preview
set completeopt+=longest,menuone
set shortmess+=c
" jedi configuration cannot be in an ftplugin
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = 0

" utf-8
set encoding=utf-8
set fileencoding=utf-8

" buffers
set hidden
nmap ]b :bnext<CR>
nmap [b :bprevious <CR>
nmap <leader>1 :bfirst<CR>
nmap <leader>2 :bfirst<CR>:bnext<CR>
nmap <leader>3 :bfirst<CR>:bnext 2<CR>
nmap <leader>4 :bfirst<CR>:bnext 3<CR>
nmap <leader>5 :bfirst<CR>:bnext 4<CR>
nmap <leader>6 :bfirst<CR>:bnext 5<CR>
nmap <leader>7 :bfirst<CR>:bnext 6<CR>
nmap <leader>8 :bfirst<CR>:bnext 7<CR>
nmap <leader>9 :bfirst<CR>:bnext 8<CR>
nmap <C-T> :ls<CR>:buffer<space>

" vim-dirvish
let g:dirvish_mode = ':sort ,^\v(.*[\/])|\ze,'
nnoremap <leader>t :Dirvish<CR>
if isdirectory($HOME . "/Dropbox/Notes")
    nnoremap <expr> <leader>w ":Dirvish " . $HOME . "/Dropbox/Notes<CR>"
    nnoremap <expr> <leader>s ":edit " . $HOME . "/Dropbox/Notes/Scratchpad/" . expand(strftime("%Y-%m-%d %H.%M.%S.md")) . "<CR>"
endif

" toggles
nnoremap <leader>p :setlocal paste! paste?<CR>
nnoremap <leader>i :setlocal list! list?<CR>

" visual appearance
syntax enable
set termguicolors
let &t_8f = "[38;2;%lu;%lu;%lum"
let &t_8b = "[48;2;%lu;%lu;%lum"
let g:nord_bold_vertical_split_line = 1
set fillchars="vert: "
colorscheme nord
set background=dark
set cursorline

" spelling
set spellfile=~/Documents/unison/spellfile.utf-8.add
set spelllang=en_gb

" statusline
set laststatus=2
set noshowmode
let g:mode_map={
            \ 'n' : 'NORMAL',
            \ 'i' : 'INSERT',
            \ 'R' : 'REPLACE',
            \ 'v' : 'VISUAL',
            \ 'V' : 'V-LINE',
            \ "\<C-v>" : 'V-BLOCK',
            \ 'c' : 'COMMAND',
            \ 's' : 'SELECT',
            \ 'S': 'S-LINE',
            \ "\<C-s>" : 'S-BLOCK',
            \ 'r' : 'PROMPT',
            \ '!' : 'SHELL',
            \ 't' : 'TERMINAL'
            \}
let g:mode_colour={
            \ 'n' : 'normal',
            \ 'i' : 'insert',
            \ 'R' : 'replace',
            \ 'v' : 'visual',
            \ 'V' : 'visual',
            \ "\<C-v>" : 'visual',
            \ 'c' : 'other',
            \ 's' : 'other',
            \ 'S': 'other',
            \ "\<C-s>" : 'other',
            \ 'r' : 'other',
            \ '!' : 'other',
            \ 't' : 'other'
            \}
highlight StatusLineNormal ctermfg=0 guifg=#3B4252 ctermbg=6 guibg=#88C0D0
highlight StatusLineInsert ctermfg=0 guifg=#3B4252 ctermbg=15 guibg=#ECEFF4
highlight StatusLineReplace ctermfg=0 guifg=#3B4252 ctermbg=3 guibg=#EBCB8B
highlight StatusLineVisual ctermfg=0 guifg=#3B4252 ctermbg=14 guibg=#8FBCBB
highlight StatusLineOther ctermfg=7 guifg=#E5E9F0 ctermbg=NONE guibg=#2E3440
highlight link StatusLinePaste StatuslineInsert
highlight StatusLineGroup0 ctermfg=7 guifg=#E5E9F0 ctermbg=8 guibg=#4C566A
highlight StatusLineGroup1 ctermfg=7 guifg=#E5E9F0 ctermbg=0 guibg=#3B4252
highlight StatusLineGroup1Red ctermfg=1 guifg=#bf616a ctermbg=0 guibg=#3B4252
highlight StatusLineGroup1Yellow ctermfg=3 guifg=#EBCB8B ctermbg=0 guibg=#3B4252
highlight link StatusLineNC StatusLineGroup0
function! SetStatusLineActive()
    setlocal statusline=
    setlocal statusline+=%#StatusLineNormal#%{(g:mode_colour[mode()]=='normal')?'\ \ '.g:mode_map[mode()].'\ ':''}
    setlocal statusline+=%#StatusLineInsert#%{(g:mode_colour[mode()]=='insert')?'\ \ '.g:mode_map[mode()].'\ ':''}
    setlocal statusline+=%#StatusLineReplace#%{(g:mode_colour[mode()]=='replace')?'\ \ '.g:mode_map[mode()].'\ ':''}
    setlocal statusline+=%#StatusLineVisual#%{(g:mode_colour[mode()]=='visual')?'\ \ '.g:mode_map[mode()].'\ ':''}
    setlocal statusline+=%#StatusLineOther#%{(g:mode_colour[mode()]=='other')?'\ \ '.g:mode_map[mode()].'\ ':''}
    setlocal statusline+=%#StatusLinePaste#%{(&paste)?'\ \ PASTE\ ':''}
    setlocal statusline+=%#StatusLineGroup1#\ %t
    setlocal statusline+=%#StatusLineGroup1Yellow#%{&readonly?'\ !!':''}
    setlocal statusline+=%#StatusLineGroup1Red#%{&modified?'âˆ™':''}%#StatusLineGroup1#\ 
    setlocal statusline+=%#StatusLineGroup0#
    setlocal statusline+=%=
    setlocal statusline+=%{&fileformat}\ \|
    setlocal statusline+=\ %{&fileencoding?&fileencoding:&encoding}\ \|
    setlocal statusline+=\ %{&filetype!=''?&filetype:'-'}\ 
    setlocal statusline+=%#StatusLineGroup1#%4v:%-4lâ‰¡%4L\ 
endfunction
function! SetStatusLineInactive()
    setlocal statusline=
    setlocal statusline+=%#StatusLineNC#
    setlocal statusline=\ %t
    setlocal statusline+=%{&readonly?'\ !!':''}
    setlocal statusline+=%#StatusLineGroup1Red#%{&modified?'âˆ™':''}%#StatusLineNC#\ 
endfunction
augroup status
    autocmd!
    autocmd VimEnter,BufEnter,WinEnter * call SetStatusLineActive()
    autocmd BufLeave,WinLeave * call SetStatusLineInactive()
augroup END

" ale
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_sign_warning = 'â–²'
let g:ale_sign_error = 'âœ—'
let g:ale_set_highlights = 0

" vim-gitgutter: run on save (see also .vim/after/plugin/gitgutter.vim) and
" change default symbol (hat tip: https://statico.github.io/vim3.html)
autocmd BufWritePost * GitGutter
let g:gitgutter_sign_added = 'âˆ™'
let g:gitgutter_sign_modified = 'âˆ™'
let g:gitgutter_sign_removed = 'âˆ™'
let g:gitgutter_sign_modified_removed = 'âˆ™'
let g:gitgutter_map_keys = 0
if v:version < 800
    let g:gitgutter_async=0
endif

" vim-commentary
vmap <leader>\ gc

" blank *.tex files are still latex, not plaintex
let g:tex_flavor = "latex"
let g:vimtex_compiler_latexmk = {'continuous': 0}
let g:vimtex_quickfix_mode = 1
let g:vimtex_mappings_enabled = 0

autocmd FileType tex highlight clear texBoldStyle
autocmd FileType tex highlight clear texItalStyle
autocmd FileType tex highlight clear texEmphStyle
autocmd FileType tex highlight clear texBoldItalStyle
autocmd FileType tex highlight clear texItalBoldStyle
