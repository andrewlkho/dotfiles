set nocompatible

set runtimepath+=$XDG_CONFIG_HOME/vim
call plug#begin($XDG_CONFIG_HOME . "/vim/bundle")
" general
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'airblade/vim-gitgutter'
Plug 'dense-analysis/ale'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'tpope/vim-eunuch'

" python
Plug 'tmhedberg/SimpylFold'
Plug 'Vimjas/vim-python-pep8-indent'

" r
Plug 'jalvesaq/Nvim-R'

" latex
Plug 'lervag/vimtex'
Plug 'junegunn/goyo.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'reedes/vim-pencil'
call plug#end()
set runtimepath+=$XDG_CONFIG_HOME/vim/after

" UI
set autoindent
set backspace=indent,eol,start
set colorcolumn=80
set lazyredraw
set listchars=tab:>-,trail:-,eol:Â¬
set number
set scrolloff=5
set splitbelow
set splitright
set helpheight=999 " make help bigger without having to chain only or C-W O

" session files, and infinite undo
set undofile
set undodir=$XDG_CACHE_HOME/vim/undo//
set nobackup
set writebackup
set backupdir=$XDG_CACHE_HOME/vim/backup//
set directory=$XDG_CACHE_HOME/vim/swap//
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

" indentation is 4 spaces, don't use tabs (but if present display as 4 spaces)
set expandtab
set softtabstop=4
set shiftwidth=4
set tabstop=4
" keep selection when indenting
vnoremap < <gv
vnoremap > >gv

" searching
set incsearch
set hlsearch
set ignorecase
set smartcase
nmap <leader>q :nohlsearch<CR>

" file searching: recursive and use wildmenu
set path+=**
set wildmenu

" utf-8
set encoding=utf-8
set fileencoding=utf-8

" buffers
set hidden
nmap ]b :bnext<CR>
nmap [b :bprevious <CR>
nmap <leader>1 :bfirst<CR>
nmap <leader>2 :bfirst<CR>:bnext<CR>
nmap <leader>3 :bfirst<CR>:bnext 2<CR>
nmap <leader>4 :bfirst<CR>:bnext 3<CR>
nmap <leader>5 :bfirst<CR>:bnext 4<CR>
nmap <leader>6 :bfirst<CR>:bnext 5<CR>
nmap <leader>7 :bfirst<CR>:bnext 6<CR>
nmap <leader>8 :bfirst<CR>:bnext 7<CR>
nmap <leader>9 :bfirst<CR>:bnext 8<CR>

" netrw
let g:netrw_fastbrowse = 0 " Always close netrw buffers
let g:netrw_dirhistmax = 0 " Don't create .netrwhist
let g:netrw_liststyle = 1
let g:netrw_banner = 0
nnoremap <leader>t :edit .<CR>
if isdirectory($HOME . "/Dropbox/Notes")
    nnoremap <expr> <leader>w ":edit " . $HOME . "/Dropbox/Notes<CR>"
    nnoremap <expr> <leader>s ":edit " . $HOME . "/Dropbox/Notes/Scratchpad/" . expand(strftime("%Y-%m-%d %H.%M.%S.md")) . "<CR>"
endif

" toggles
nnoremap <leader>p :setlocal paste! paste?<CR>
nnoremap <leader>i :setlocal list! list?<CR>

" visual appearance
syntax enable
set termguicolors
let &t_8f = "[38:2:%lu:%lu:%lum"
let &t_8b = "[48:2:%lu:%lu:%lum"
colorscheme gruvbox
set background=dark
set cursorline

set laststatus=2
set showtabline=2
set noshowmode
let g:lightline = {
    \ 'colorscheme': 'gruvboxcustom',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename' ] ],
    \   'right': [ [ 'lineinfo' ], [ 'percent' ],
    \              [ 'linter_warnings', 'linter_errors' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'tabline': {
    \   'left': [ ['buffers'] ],
    \   'right': []
    \ },
    \ 'component_function': {
    \   'filename': 'LightlineFilename'
    \ },
    \ 'component_expand': {
    \   'buffers': 'lightline#bufferline#buffers',
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors'
    \ },
    \ 'component_type': {
    \   'buffers': 'tabsel',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error'
    \ }
    \ }
let g:lightline#bufferline#modified = 'âˆ™'
let g:lightline#ale#indicator_warnings = 'â–² '
let g:lightline#ale#indicator_errors = 'âœ— '
function! LightlineFilename()
    let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
    let modified = &modified ? 'âˆ™' : ''
    return filename . modified
endfunction

" ale
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_sign_warning = 'â–²'
let g:ale_sign_error = 'âœ—'
let g:ale_set_highlights = 0

" vim-gitgutter: run on save (see also .vim/after/plugin/gitgutter.vim) and
" change default symbol (hat tip: https://statico.github.io/vim3.html)
autocmd BufWritePost * GitGutter
let g:gitgutter_sign_added = 'âˆ™'
let g:gitgutter_sign_modified = 'âˆ™'
let g:gitgutter_sign_removed = 'âˆ™'
let g:gitgutter_sign_modified_removed = 'âˆ™'
if v:version < 800
    let g:gitgutter_async=0
endif

" vim-commentary
vmap <leader>\ gc

" blank *.tex files are still latex, not plaintex
let g:tex_flavor = "latex"
let g:vimtex_compiler_latexmk = {'continuous': 0}
let g:vimtex_quickfix_mode = 1
let g:vimtex_mappings_enabled = 0

autocmd FileType tex highlight clear texBoldStyle
autocmd FileType tex highlight clear texItalStyle
autocmd FileType tex highlight clear texEmphStyle
autocmd FileType tex highlight clear texBoldItalStyle
autocmd FileType tex highlight clear texItalBoldStyle
